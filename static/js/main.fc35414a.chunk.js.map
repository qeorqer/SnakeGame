{"version":3,"sources":["components/snake.js","components/food.js","App.js","index.js"],"names":["Snake","dots","map","dot","i","className","key","style","left","top","Food","food","getRandomCoordinates","Math","floor","random","App","useState","snakeDots","setSnake","setFood","direction","setDirection","speed","score","setScore","useEffect","document","onkeydown","keyDownMethod","interval","setInterval","snakeMovement","checkIfOutOfBorder","checkIfEat","checkCollapse","clearInterval","e","window","event","console","log","keyCode","head","length","push","shift","gameOver","alert","snake","pop","forEach","el","enlargeSnake","newSnake","unshift","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fc35414a.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Snake = ({dots}) => {\r\n\treturn (\r\n\tdots.map((dot, i) => (\r\n\t\t<div className=\"snake-dot\" key = {i} style = {{\r\n\t\t\tleft: `${dot[0]}%`,\r\n\t\t\ttop : `${dot[1]}%`\r\n\t\t}}></div>\r\n\t\t))\r\n\r\n\t);\r\n} ","import React from \"react\";\r\n\r\nexport const Food = ({food}) => {\r\n\tconst style = {\r\n\t\tleft: `${food[0]}%`,\r\n\t\ttop : `${food[1]}%`\r\n\t}\r\n\treturn (\r\n\t\t<div className=\"snake-food\"  style = {style}></div>\r\n\t\t);\r\n}","import React, {useState, useEffect} from 'react';\nimport {Snake} from './components/snake';\nimport {Food} from './components/food';\n\n//the function for getting the coordinates\nconst getRandomCoordinates = () => {\n    let min = 1;\n    let max = 98;\n    let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n    let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\n    return [x, y]\n}\n\nfunction App() {\n    //the state\n    let [snakeDots, setSnake] = useState([[0, 0], [2, 0]]);\n    let [food, setFood] = useState(getRandomCoordinates());\n    let [direction, setDirection] = useState(\"right\")\n    let [speed, setSpeed] = useState(200);\n    let [score, setScore] = useState(0);\n\n    //listen to the keydown when rendered\n    useEffect(() => {\n        document.onkeydown = keyDownMethod;\n        const interval = setInterval(() => {\n            snakeMovement();\n            checkIfOutOfBorder();\n            checkIfEat();\n            checkCollapse();\n        }, speed);\n        return () => clearInterval(interval);\n\n\n    }, [snakeDots])\n\n    //the key down method that changes directions\n    let keyDownMethod = (e) => {\n        e = e || window.event;\n        console.log(e.keyCode);\n        switch (e.keyCode) {\n            case 38:\n                setDirection(\"up\")\n                break;\n            case 40:\n                setDirection(\"down\")\n                break;\n            case 37:\n                setDirection(\"left\")\n                break;\n            case 39:\n                setDirection(\"right\")\n                break;\n        }\n    }\n\n    //creating new head and removing the tail depending on direction\n    let snakeMovement = () => {\n        let dots = [...snakeDots];\n        let head = dots[dots.length - 1];\n\n        switch (direction) {\n            case \"right\":\n                head = [head[0] + 2, head[1]];\n                break;\n            case \"left\":\n                head = [head[0] - 2, head[1]];\n                break;\n            case \"down\":\n                head = [head[0], head[1] + 2];\n                break;\n            case \"up\":\n                head = [head[0], head[1] - 2];\n                break;\n        }\n        dots.push(head);\n        dots.shift();\n        setSnake(dots);\n    }\n\n    //restarting the game method\n    let gameOver = () => {\n        alert(`Game over. The you score is ${score}.`);\n        setSnake([[0, 0], [2, 0]]);\n        setDirection(\"right\");\n        setFood(getRandomCoordinates());\n        setScore(0);\n    }\n\n    //checking if snake is out of borders\n    let checkIfOutOfBorder = () => {\n        let head = snakeDots[snakeDots.length - 1];\n        if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n            gameOver();\n        }\n    }\n\n    //check if snake hits itself\n    let checkCollapse = () => {\n        let snake = [...snakeDots];\n        let head = snake[snake.length - 1];\n        snake.pop();\n        snake.forEach(el => {\n            if (head[0] === el[0] && head[1] === el[1]) {\n                gameOver();\n            }\n        })\n    }\n\n    //check if eat\n    let checkIfEat = () => {\n        let head = snakeDots[snakeDots.length - 1];\n        if (head[0] === food[0] && head[1] === food[1]) {\n            setFood(getRandomCoordinates());\n            setScore(score + 1);\n            enlargeSnake();\n        }\n    }\n\n    //enlarging the snake method\n    let enlargeSnake = () => {\n        let newSnake = [...snakeDots];\n        newSnake.unshift([]);\n        setSnake(newSnake);\n    }\n    return (\n        <>\n            <div className=\"score\">Score: {score}</div>\n            <div className=\"game-area\">\n\n                <Snake dots={snakeDots}/>\n                <Food food={food}/>\n            </div>\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}